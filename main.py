# -*- coding: utf-8 -*-

from botrequests.functions import bot, next_step_city, user, logging
from botrequests.myclass import Users
from datetime import datetime


info_help = '‚óè /help ‚Äî –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞\n' \
       '‚óè /lowprice ‚Äî –≤—ã–≤–æ–¥ —Å–∞–º—ã—Ö –¥–µ—à—ë–≤—ã—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ\n' \
       '‚óè /highprice ‚Äî –≤—ã–≤–æ–¥ —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ\n' \
       '‚óè /bestdeal ‚Äî –≤—ã–≤–æ–¥ –æ—Ç–µ–ª–µ–π, –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —Ü–µ–Ω–µ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞\n' \
       '‚óè /history - –≤—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π'

@bot.message_handler(commands=["help", "lowprice", "highprice", "bestdeal", "history"])
def comands_message(message):
    print(message)
    if not user.get(message.from_user.id):
        user[message.from_user.id] = Users(message)
    user[message.chat.id].clearCache()
    if message.text.lower() == "/help":
        bot.send_message(message.from_user.id, info_help,
                         reply_markup=user[message.from_user.id].getStart_kbd())

    elif message.text.lower() == '/start':
        start_help_text = f"–ü—Ä–∏–≤–µ—Ç {user[message.from_user.id].username}, —è –ë–û–¢ –ø–æ –ø–æ–∏—Å–∫—É –æ—Ç–µ–ª–µ–π‚úÖ,\n" \
                              "–ò —è –≥–æ—Ç–æ–≤ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –í–∞—Å –æ—Ç–µ–ª—å üè®"
        bot.send_message(message.from_user.id, start_help_text,
                         reply_markup=user[message.from_user.id].getStart_kbd())

    elif message.text.lower() == '/lowprice':
        user[message.chat.id].command = message.text
        msg = bot.send_message(message.from_user.id, '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?')
        bot.register_next_step_handler(msg, next_step_city)

    elif message.text.lower() == '/history':
        history = user[message.from_user.id].history()
        if not history:
            history = '–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞'
        bot.send_message(message.from_user.id, (",").join(history), parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: True)
def inline(call):
    if call.data == '/lowprice':
        user[call.message.chat.id].command = call.message.text
        msg = bot.send_message(call.message.from_user.id, '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?')
        bot.register_next_step_handler(msg, next_step_city)

    elif call.data == '/history':
        history = user[call.message.from_user.id].history()[0]
        if not history:
            history = '–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞'
        bot.send_message(call.message.from_user.id, (",").join(history), parse_mode="Markdown")


if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True, interval=0)
        except Exception as ex:
            logging.error(f"{datetime.now()} - {ex}")
