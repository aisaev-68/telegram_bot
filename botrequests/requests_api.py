# -*- coding: utf-8 -*-
import re
import requests
import json
from handlers import logging, config
from datetime import datetime
from locales import loc_txt
from typing import Any
from bs4 import BeautifulSoup

commands = ["/lowprice", "/highprice", "/bestdeal", "/history"]


def req_api(url: str, querystring: dict, lng="en_US") -> Any:
    """
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –≥–æ—Å—Ç–∏–Ω–∏—Ü.
    :param url: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞
    :param querystring: —Å—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    :return data: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ API –¥–∞–Ω–Ω—ã–µ
    """
    server_error = {"ru_RU": {"ertime": "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                              "erjson": "–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                              "ercon": "–ù–µ—Ç, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                              "erhttp": "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."},
                    "en_US": {"ertime": "The request timed out. Please try again later.",
                               "erjson": "Received an invalid response from the service. Please try again later.",
                               "ercon": "No, connecting to the service. Please try again later.",
                               "erhttp": "Something went wrong. Please try again later."}}
    headers = {
        'x-rapidapi-host': "hotels4.p.rapidapi.com",
        'x-rapidapi-key': config('RAPID_API_KEY')
    }
    try:
        response = requests.request("GET", url, headers=headers, params=querystring)
        if response.status_code == 200:
            data = json.loads(response.text)
            return data
        else:
            logging.error(f"{datetime.now()} - –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
            return server_error[lng]["erhttp"]
    except ConnectionError as ercon:
        logging.error(f"{datetime.now()} - {ercon} - –ù–µ—Ç, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º.")
        return server_error[lng]["ercon"]
    except TimeoutError as ertime:
        logging.error(f"{datetime.now()} - {ertime} -–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–µ–∫–ª–æ")
        return server_error[lng]["ertime"]
    except json.decoder.JSONDecodeError as erjson:
        logging.error(f"{datetime.now()} - {erjson} - –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞.")
        return server_error[lng]["erjson"]


def query_string(command: str, qstring: dict) -> dict:
    """–§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
    :param command: –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è /lowprice, /highprice, /bestdeal
    :param qstring: –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞ –∫ API –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è

    """
    querystring = {
        "destinationId": qstring['id_city'],
        "pageNumber": "1",
        "pageSize": qstring['count_show_hotels'],
        "checkIn": qstring['checkIn'],
        "checkOut": qstring['checkOut'],
        "adults1": "1",
        "sortOrder": "PRICE",
        "locale": qstring['language'],
        "currency": qstring['currency']
    }
    if commands[1] == command:
        querystring.update({"sortOrder": "PRICE_HIGHEST_FIRST"})
    if commands[2] == command:
        querystring.update({"pageSize": "25", "priceMin": qstring['min'],
                            "priceMax": qstring['max'],
                            "sortOrder": "PRICE",
                            "landmarkIds": ("City center" if qstring['language'] == "en_US" else "–¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞")}
                           )
    return querystring


def get_city_id(search_city: str, lang: str) -> Any:
    """
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –≥–æ—Ä–æ–¥–∞. –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
    :param search_city: —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    :param lang: —è–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–∞
    """
    querystring = {"query": search_city, "locale": lang}
    result_id_city = req_api(config('URL'), querystring, lang)
    search_city_list = []
    print(type(result_id_city))
    # TypeError: 'NoneType' object is not subscriptable
    if isinstance(result_id_city, dict):
        for city in result_id_city['suggestions']:
            for name in city['entities']:
                parse_city = (BeautifulSoup(name['caption'], 'html.parser').get_text()).lower()
                if parse_city.startswith(search_city) and name['type'] == 'CITY':
                    # –î–æ–±–∞–≤–∏—Ç—å –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è and name['name'].lower() == search_city
                    search_city_list.append({
                        'destinationID': name['destinationId'],
                        'city_name': parse_city.title()})
        return search_city_list
    else:
        return result_id_city


def get_photos(id_photo: str) -> list:
    """
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–µ–ª—è. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
    :param id_photo: ID –æ—Ç–µ–ª—è
    :return photo_list: —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–µ–ª—è
    """

    url = config('URL_PHOTOS')
    querystring = {"id": f"{id_photo}"}
    response = req_api(url, querystring)
    photo_list = []
    for photo in response["roomImages"]:
        for img in photo['images']:
            photo_list.append(img['baseUrl'].replace('{size}', 'z'))
    return photo_list


def hotel_query(querystring: dict, source_dict: dict) -> Any:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å –æ—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ —Ü–µ–Ω–µ.
    –ï—Å–ª–∏ –æ—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.
    :param querystring: —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    :param source_dict: –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    :return result_low: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å (–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è, –∞–¥—Ä–µ—Å,
    —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–µ–ª—è (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—á—ë–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º –∏—Ö –≤—ã–≤–æ–¥)
    """

    url_low = config('URL_LOW')
    hotels_dict = {}
    loc = source_dict['language']
    low_data = req_api(url_low, querystring, loc)

    links_htmls = ("https://ru.hotels.com/ho{}" if loc[:2] == "ru"
                   else "https://hotels.com/ho{}?pos=HCOM_US&locale=en_US")
    # TypeError: 'NoneType' object is not subscriptable
    if low_data:
        for hotel_count, results in enumerate(low_data['data']['body']['searchResults']['results']):
            summa = float(source_dict['diff_date']) * results["ratePlan"]["price"]["exactCurrent"]
            if source_dict['count_show_hotels'] != hotel_count:
                txt = f"‚≠ê‚≠ê‚≠ê*{loc_txt[loc][0]} {(results.get('starRating')) if results.get('starRating') else '--'}*‚≠ê‚≠ê‚≠ê\n" \
                      f"üè® {loc_txt[loc][1]} {results['name']}\n" \
                      f"       {loc_txt[loc][2]} {results['address'].get('countryName')}, {results['address'].get('locality')}, " \
                      f"{(results['address'].get('streetAddress') if results['address'].get('streetAddress') else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–¥—Ä–µ—Å–µ...')}\n" \
                      f"üöó {loc_txt[loc][3]} {results['landmarks'][0]['distance']}\n" \
                      f"üìÖ {loc_txt[loc][4]} {source_dict['checkIn']} - {source_dict['checkOut']}\n" \
                      f"üíµ {loc_txt[loc][5]} *{(results['ratePlan']['price']['exactCurrent']) if results['ratePlan']['price']['exactCurrent'] else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ü–µ–Ω–∫–∞—Ö...'}*\n" \
                      f"üíµ {loc_txt[loc][6].format(source_dict['diff_date'])} *{summa if results['ratePlan']['price']['exactCurrent'] else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ü–µ–Ω–∫–∞—Ö...'}*\n" \
                      f"üåç {loc_txt[loc][7]}" + f"{links_htmls.format(results['id'])}\n"
                if source_dict['status_show_photo']:
                    data_photo = get_photos(results['id'])
                    photo_lst = []
                    for index, photo in enumerate(data_photo):
                        if source_dict['count_show_photo'] != index:
                            photo_lst.append(photo)
                        else:
                            break
                    hotels_dict[txt] = photo_lst
                else:
                    hotels_dict[txt] = []
        with open('hotel.json', 'w') as f:
            json.dump(hotels_dict, f, indent=4)
        return hotels_dict
    else:
        return low_data
